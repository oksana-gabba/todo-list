{"version":3,"sources":["img/check-mark.svg","img/dustbin.svg","img/plus.svg","context.js","components/TodoItem.js","components/TodoList.js","DataFromServer.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","TodoItem","todo","toggleItem","useContext","removeItem","className","ClassNames","completed","htmlFor","id","type","checked","onChange","src","checkMark","alt","title","onClick","dustbin","TodoList","todos","map","key","defaultProps","todosFromServer","AddTodo","addTodo","useState","value","setValue","onSubmit","event","preventDefault","target","placeholder","plus","App","setTodos","Provider","filter","concat","Date","now","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.255c828f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check-mark.7cc3ec33.svg\";","module.exports = __webpack_public_path__ + \"static/media/dustbin.0586c3c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.4d8cd2e2.svg\";","import React from 'react';\n\nconst Context = React.createContext();\n\nexport default Context;","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\nimport Context from '../context';\nimport checkMark from '../img/check-mark.svg';\nimport dustbin from '../img/dustbin.svg';\n\nconst TodoItem = ({ todo }) => {\n\n  const { toggleItem } = useContext(Context);\n  const { removeItem } = useContext(Context);\n\n  return (\n    <li className={ClassNames(\"todo-item\", {\"done\": todo.completed})}>\n      <span className=\"todo-item__title-wrapper\">\n        <label htmlFor={\"checkbox\" + todo.id} className=\"todo-item__checkbox-label\">\n          <input \n            type=\"checkbox\" \n            id={\"checkbox\" + todo.id}\n            className=\"todo-item__checkbox\"\n            checked={todo.completed}\n            onChange={() => toggleItem(todo.id)}\n          />  \n          <img src={checkMark} alt=\"\" className=\"todo-item__check-mark-img\"/>\n        </label>\n        <span className=\"todo-item__title\">{todo.title}</span>\n      </span>\n      <button \n        type=\"button\" \n        className=\"todo-item__remove-button\"\n        onClick={() => removeItem(todo.id)}\n      >\n        <img src={dustbin} alt=\"\" className=\"todo-item__dustbin-img\" />\n      </button>\n    </li>\n  )\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired\n  }).isRequired,\n  toggleItem: PropTypes.func.isRequired\n};\n\nexport default TodoItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst  TodoList = ({ todos }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem todo={todo} key={todo.id}/>\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object),\n};\n\nTodoList.defaultProps = {\n  todos: []\n};\n\nexport default TodoList;","const todosFromServer = [\n  {\n    id: 1, \n    title: 'Wake up at 7 am', \n    completed: false\n  },\n  {\n    id: 2, \n    title: 'Do morning yoga', \n    completed: false\n  },\n  {\n    id: 3, \n    title: 'Buy some food', \n    completed: false\n  },\n  {\n    id: 4, \n    title: 'Learning React', \n    completed: false\n  },\n  {\n    id: 5, \n    title: 'Do to the gym', \n    completed: false\n  },\n  {\n    id: 6, \n    title: 'Learning English', \n    completed: false\n  },\n];\n\nexport default todosFromServer;\n","import React, { useState } from 'react';\nimport plus from '../img/plus.svg';\nimport PropTypes from 'prop-types';\n\nconst AddTodo = ({ addTodo }) => {\n\n  const [value, setValue] = useState('');\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (value) {\n      addTodo(value);\n      setValue('');\n    }\n  }\n\n  return (\n    <form \n      className=\"todo-list__form\"\n      onSubmit={submitHandler}\n    >\n      <input \n        type=\"text\" \n        className=\"todo-list__add-input\" \n        value={value}\n        onChange={event => setValue(event.target.value)}\n        placeholder=\"Add new todo\"\n      />\n      <button type=\"submit\" className=\"todo-list__add-button\">\n        <img src={plus} className=\"todo-list__add-button-img\" alt=\"\" />\n      </button>\n    </form>\n  )\n};\n\nAddTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired\n};\n\nexport default AddTodo;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport todosFromServer from './DataFromServer.js';\nimport Context from './context';\nimport AddTodo from './components/AddTodo';\n\nconst App = () => {\n\n  const [todos, setTodos] = React.useState(todosFromServer);\n\n  const toggleItem = id => {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    )\n  };\n\n  const removeItem = id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  const addTodo = title => {\n    setTodos(\n      todos.concat([{\n        id: Date.now(),\n        title,\n        completed: false\n      }])\n    )\n  }\n\n  return (\n    <Context.Provider value={{ toggleItem, removeItem }}>\n      <div className=\"App\">\n        <h1>Todo list</h1>\n        <AddTodo addTodo={addTodo}/>\n        <TodoList todos={todos}/>\n      </div>\n    </Context.Provider>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}